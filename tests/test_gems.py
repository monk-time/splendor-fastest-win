from color import COLOR_NUM
from gems import MAX_GEMS, get_takes, subtract_with_bonus, take_gems


def test_take_gems_for_7():
    combs = tuple(take_gems(
        (0, 0, 0, 0, 0)))
    assert combs == (
        (1, 1, 1, 0, 0),
        (1, 1, 0, 1, 0),
        (1, 1, 0, 0, 1),
        (1, 0, 1, 1, 0),
        (1, 0, 1, 0, 1),
        (1, 0, 0, 1, 1),
        (0, 1, 1, 1, 0),
        (0, 1, 1, 0, 1),
        (0, 1, 0, 1, 1),
        (0, 0, 1, 1, 1),
        (2, 0, 0, 0, 0),
        (0, 2, 0, 0, 0),
        (0, 0, 2, 0, 0),
        (0, 0, 0, 2, 0),
        (0, 0, 0, 0, 2)
    )
    assert len(combs) == 15

    combs = tuple(take_gems(
        (6, 0, 0, 0, 0)))
    assert combs == (
        (7, 1, 1, 0, 0),
        (7, 1, 0, 1, 0),
        (7, 1, 0, 0, 1),
        (7, 0, 1, 1, 0),
        (7, 0, 1, 0, 1),
        (7, 0, 0, 1, 1),
        (6, 1, 1, 1, 0),
        (6, 1, 1, 0, 1),
        (6, 1, 0, 1, 1),
        (6, 0, 1, 1, 1),
        (6, 2, 0, 0, 0),
        (6, 0, 2, 0, 0),
        (6, 0, 0, 2, 0),
        (6, 0, 0, 0, 2)
    )
    assert len(combs) == 14
    assert len(tuple(take_gems((0, 6, 0, 0, 0)))) == 14
    assert len(tuple(take_gems((0, 0, 6, 0, 0)))) == 14
    assert len(tuple(take_gems((0, 0, 0, 6, 0)))) == 14
    assert len(tuple(take_gems((0, 0, 0, 0, 6)))) == 14

    combs = tuple(take_gems(
        (7, 0, 0, 0, 0)))
    assert len(combs) == 8
    assert combs == (
        (7, 1, 1, 1, 0),
        (7, 1, 1, 0, 1),
        (7, 1, 0, 1, 1),
        (7, 0, 1, 1, 1),
        (7, 2, 0, 0, 0),
        (7, 0, 2, 0, 0),
        (7, 0, 0, 2, 0),
        (7, 0, 0, 0, 2)
    )
    assert len(tuple(take_gems((0, 0, 7, 0, 0)))) == 8
    assert len(tuple(take_gems((0, 0, 0, 0, 7)))) == 8

    combs = tuple(take_gems(
        (0, 2, 1, 0, 1)))
    assert combs == (
        (1, 3, 2, 0, 1),
        (1, 3, 1, 1, 1),
        (1, 3, 1, 0, 2),
        (1, 2, 2, 1, 1),
        (1, 2, 2, 0, 2),
        (1, 2, 1, 1, 2),
        (0, 3, 2, 1, 1),
        (0, 3, 2, 0, 2),
        (0, 3, 1, 1, 2),
        (0, 2, 2, 1, 2),
        (2, 2, 1, 0, 1),
        (0, 4, 1, 0, 1),
        (0, 2, 3, 0, 1),
        (0, 2, 1, 2, 1),
        (0, 2, 1, 0, 3)
    )


def test_take_gems_at_8():
    combs = tuple(take_gems(
        (4, 0, 2, 1, 1)
    ))
    for c in combs:
        assert sum(c) == 10
    assert combs == (
        (5, 1, 3, 1, 0),
        (5, 1, 3, 0, 1),
        (5, 1, 2, 2, 0),
        (5, 1, 2, 0, 2),
        (5, 1, 1, 2, 1),
        (5, 1, 1, 1, 2),
        (5, 0, 3, 2, 0),
        (5, 0, 3, 0, 2),
        (5, 0, 1, 2, 2),
        (4, 1, 3, 2, 0),
        (4, 1, 3, 0, 2),
        (4, 1, 1, 2, 2),
        (3, 1, 3, 2, 1),
        (3, 1, 3, 1, 2),
        (3, 1, 2, 2, 2),
        (3, 0, 3, 2, 2),
        (5, 1, 2, 1, 1),
        (5, 0, 3, 1, 1),
        (5, 0, 2, 2, 1),
        (5, 0, 2, 1, 2),
        (4, 1, 3, 1, 1),
        (4, 1, 2, 2, 1),
        (4, 1, 2, 1, 2),
        (4, 0, 3, 2, 1),
        (4, 0, 3, 1, 2),
        (4, 0, 2, 2, 2),
        (4, 2, 2, 1, 1),
        (4, 0, 4, 1, 1),
        (4, 0, 2, 3, 1),
        (4, 0, 2, 1, 3)
    )

    combs = tuple(take_gems(
        (0, 2, 6, 0, 0)
    ))
    assert combs == (
        (1, 3, 5, 1, 0),
        (1, 3, 5, 0, 1),
        (1, 2, 5, 1, 1),
        (1, 1, 7, 1, 0),
        (1, 1, 7, 0, 1),
        (1, 1, 6, 1, 1),
        (0, 3, 5, 1, 1),
        (0, 1, 7, 1, 1),
        (1, 3, 6, 0, 0),
        (1, 2, 7, 0, 0),
        (1, 2, 6, 1, 0),
        (1, 2, 6, 0, 1),
        (0, 3, 7, 0, 0),
        (0, 3, 6, 1, 0),
        (0, 3, 6, 0, 1),
        (0, 2, 7, 1, 0),
        (0, 2, 7, 0, 1),
        (0, 2, 6, 1, 1),
        (2, 2, 6, 0, 0),
        (0, 4, 6, 0, 0),
        (0, 2, 6, 2, 0),
        (0, 2, 6, 0, 2)
    )


def test_take_gems_at_9():
    combs = tuple(take_gems(
        (4, 0, 3, 1, 1)
    ))
    for c in combs:
        assert sum(c) == 10
    assert combs == (
        (5, 1, 4, 0, 0),
        (5, 1, 2, 2, 0),
        (5, 1, 2, 0, 2),
        (3, 1, 4, 2, 0),
        (3, 1, 4, 0, 2),
        (3, 1, 2, 2, 2),
        (5, 1, 3, 1, 0),
        (5, 1, 3, 0, 1),
        (5, 1, 2, 1, 1),
        (5, 0, 4, 1, 0),
        (5, 0, 4, 0, 1),
        (5, 0, 3, 2, 0),
        (5, 0, 3, 0, 2),
        (5, 0, 2, 2, 1),
        (5, 0, 2, 1, 2),
        (4, 1, 4, 1, 0),
        (4, 1, 4, 0, 1),
        (4, 1, 3, 2, 0),
        (4, 1, 3, 0, 2),
        (4, 1, 2, 2, 1),
        (4, 1, 2, 1, 2),
        (4, 0, 4, 2, 0),
        (4, 0, 4, 0, 2),
        (4, 0, 2, 2, 2),
        (3, 1, 4, 1, 1),
        (3, 1, 3, 2, 1),
        (3, 1, 3, 1, 2),
        (3, 0, 4, 2, 1),
        (3, 0, 4, 1, 2),
        (3, 0, 3, 2, 2),
        (5, 0, 3, 1, 1),
        (4, 1, 3, 1, 1),
        (4, 0, 4, 1, 1),
        (4, 0, 3, 2, 1),
        (4, 0, 3, 1, 2),
        (4, 2, 3, 1, 0),
        (4, 2, 3, 0, 1),
        (4, 2, 2, 1, 1),
        (4, 0, 5, 1, 0),
        (4, 0, 5, 0, 1),
        (4, 0, 3, 3, 0),
        (4, 0, 3, 0, 3),
        (4, 0, 2, 3, 1),
        (4, 0, 2, 1, 3),
        (3, 2, 3, 1, 1),
        (3, 0, 5, 1, 1),
        (3, 0, 3, 3, 1),
        (3, 0, 3, 1, 3)
    )


def test_take_gems_at_10():
    combs = tuple(take_gems(
        (0, 6, 0, 1, 3)
    ))
    for c in combs:
        assert sum(c) == 10
    assert combs == (
        (1, 7, 0, 0, 2),
        (1, 6, 1, 0, 2),
        (1, 5, 1, 1, 2),
        (1, 5, 1, 0, 3),
        (1, 5, 0, 2, 2),
        (1, 5, 0, 0, 4),
        (0, 7, 1, 0, 2),
        (0, 5, 1, 2, 2),
        (0, 5, 1, 0, 4),
        (1, 6, 0, 1, 2),
        (1, 6, 0, 0, 3),
        (1, 5, 0, 1, 3),
        (0, 7, 0, 1, 2),
        (0, 7, 0, 0, 3),
        (0, 6, 1, 1, 2),
        (0, 6, 1, 0, 3),
        (0, 6, 0, 2, 2),
        (0, 6, 0, 0, 4),
        (0, 5, 1, 1, 3),
        (0, 5, 0, 2, 3),
        (0, 5, 0, 1, 4),
        (2, 6, 0, 0, 2),
        (2, 5, 0, 1, 2),
        (2, 5, 0, 0, 3),
        (0, 6, 2, 0, 2),
        (0, 5, 2, 1, 2),
        (0, 5, 2, 0, 3),
        (0, 5, 0, 3, 2),
        (0, 5, 0, 0, 5),
        (2, 6, 0, 1, 1),
        (2, 4, 0, 1, 3),
        (0, 6, 2, 1, 1),
        (0, 6, 0, 3, 1),
        (0, 4, 2, 1, 3),
        (0, 4, 0, 3, 3),
        (0, 4, 0, 1, 5)
    )


gs = ((0, 0, 5, 1, 3), (2, 1, 0, 1, 3), (3, 2, 0, 0, 5),
      (1, 1, 1, 2, 2), (0, 0, 1, 5, 2), (1, 0, 2, 1, 3),
      (5, 3, 1, 1, 0), (3, 0, 1, 1, 1), (1, 2, 0, 4, 1),
      (1, 3, 1, 0, 2), (2, 2, 0, 1, 3), (0, 2, 2, 2, 4),
      (3, 0, 3, 1, 1), (0, 1, 0, 7, 2), (5, 3, 0, 1, 1),
      (1, 2, 3, 0, 4), (2, 3, 0, 2, 3), (0, 1, 3, 2, 3),
      (0, 6, 1, 1, 1), (1, 0, 0, 0, 6), (1, 5, 0, 1, 2))


def test_take_gems_size():
    for g in gs:
        combs = tuple(take_gems(g))
        n1 = sum(g)
        for c in combs:
            n2 = sum(c)
            assert n2 <= 10
            assert n2 == min(n1 + 3, 10) or n2 == min(n1 + 2, 10)


def test_take_gems_no_dupl():
    for g in gs:
        combs = tuple(take_gems(g))
        assert len(combs) > 10
        assert len(combs) == len(set(combs))


def test_get_takes():
    takes = get_takes()
    assert len(takes) == (MAX_GEMS + 1) ** COLOR_NUM


def test_subtract_with_bonus():
    assert subtract_with_bonus(gems=(1, 2, 0, 3, 1),
                               cost=(1, 0, 0, 2, 1),
                               bonus=(0, 1, 0, 1, 3)) == (0, 2, 0, 2, 1)
